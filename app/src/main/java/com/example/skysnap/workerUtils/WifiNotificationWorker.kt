package com.example.skysnap.workerUtils

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import com.example.skysnap.R
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext

/**
 * Worker class responsible for performing background work related to Wi-Fi notifications.
 */
class WifiNotificationWorker(context: Context, params: WorkerParameters) :
    CoroutineWorker(context, params) {

    /**
     * This function is called when the worker is scheduled to perform its task.
     */
    override suspend fun doWork(): Result {
        makeStatusNotification("Starting the worker", applicationContext)
        return withContext(Dispatchers.IO) {
            return@withContext try {
                delay(10000L)
                makeStatusNotification("Work finished successfully", applicationContext)
                Result.success()
            } catch (throwable: Throwable) {
                Result.failure()
            }
        }
    }

    /**
     * Helper function to create and display a status notification.
     */
    private fun makeStatusNotification(message: String, context: Context) {

        // Make a channel if necessary
        // Create the NotificationChannel, but only on API 26+ because
        // the NotificationChannel class is new and not in the support library
        val name = "TaskApp"
        val description = "TaskApp notifications"
        val importance = NotificationManager.IMPORTANCE_HIGH
        val channel = NotificationChannel("taskApp", name, importance)
        channel.description = description

        // Add the channel
        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager?

        notificationManager?.createNotificationChannel(channel)

        // Create the notification
        val builder = NotificationCompat.Builder(context, "taskApp")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .setContentTitle("TaskApp")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setVibrate(LongArray(0))

        /*Note: this code was generated by Android studio
        * It follows the same principles used in the camera screen composable
        * */
        // Show the notification
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.POST_NOTIFICATIONS
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return
        }
        NotificationManagerCompat.from(context).notify(1, builder.build())
    }
}
